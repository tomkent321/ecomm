ompiled successfully!

You can now view frontend in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://192.168.0.8:3000

Note that the development build is not optimized.
To create a production build, use yarn build.


to get the front end to see the backend local host added a proxy statement to 
the front end package.json file.  in this case:

"proxy": "http://127.0.0.1:5000",

in HomeScreen.js :

const HomeScreen = () => {
  //next statement uses the use state: [var, fuctionName] = useState(initial state)
  const [products, setProducts] = useState([])
  useEffect(() => {
    const fetchProducts = async () => {
      const { data } = await axios.get('/api/products')
      setProducts(data)
    }
    fetchProducts()
  }, [])         <==== in brackets are depenencies (will fire off the useEffect function. In this case it runs immediately because fetchProducts() is called when component loads.  useEffect is used for functional components.  Class components would use the constructor function instead)




//example of middleware:   (would show original url calling)
app.use((req,res, next)=> {
  console.log(req.originalUrl)
  next()
})

response after making a request:

/api/products/5f8bdd24b313b53997c21398


npm:    express-async-handler
Simple middleware for handling exceptions inside of async express routes and passing them to your express error handlers.


Docs on Redux:
https://redux.js.org/understanding/thinking-in-redux/glossary


dependencies in the FRONTEND to install Redux:

npm i redux react-redux redux-thunk  redux-devtools-extension

steps:  

1. create redux store
    in src folder
    file:  store.js



Adding new actions to Redux store

1. add new constants to actions/actionTypes.js
2. add a new reducer function the the appropriate reducer file
3. add the new reducer to the store.js file
4. add the action to the appropriate actions.js file




note: in adding new users the hash of the password is done through middleware in
the mongoose model:


userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) {
    next()
  }

  const salt = await bcrypt.genSalt(10)
  this.password = await bcrypt.hash(this.password, salt)
})

the hash takes place before a new user is saved (the 'pre')


Need to review:

Lecture on buidling the login HomeScreen:

    * useEffect
    * histor.push
    * useState with []
    * in const LoginScreen = ({ * location and * history args})
    * const redirect = location.search ? location.search.split('=')[1] : '/'  review what's going on with the split



$.cookie("previousUrl", window.location.href, {path:"/"});   to get previous url

https://stackoverflow.com/questions/53158796/get-scroll-position-with-reactjs

You have to store the scroll position in state on click of post with the use of window.pageYOffset

this.setState({
    scrollPosition: window.pageYOffset
});
And once you click on back button at that time you have to set the window position in the method of componentDidMount.

window.scrollTo(0, this.state.scrollPosition);
By default you can set the value of scrollPosition is 0.

Updated

Here I have used the sessionStorage to maintain the scroll position for demo purpose. You can also use the context API or redux store to manage it.

Here is the working demo for you. https://stackblitz.com/edit/react-fystht

import React from "react";
import axios from "axios";
import { Link } from "react-router-dom";

class Posts extends React.Component {
  state = { posts: [] };



  import React from "react";
import axios from "axios";
import { Link } from "react-router-dom";

class Posts extends React.Component {
  state = { posts: [] };

  componentDidMount() {
    axios.get("https://jsonplaceholder.typicode.com/posts").then(res => {
      this.setState({ posts: res.data.slice(0, 20) }, () => {
        this.handleScrollPosition();
      });
    });
  }

  // handle scroll position after content load
  handleScrollPosition = () => {
    const scrollPosition = sessionStorage.getItem("scrollPosition");
    if (scrollPosition) {
      window.scrollTo(0, parseInt(scrollPosition));
      sessionStorage.removeItem("scrollPosition");
    }
  };

  // store position in sessionStorage
  handleClick = e => {
    sessionStorage.setItem("scrollPosition", window.pageYOffset);
  };

  render() {
    const { posts } = this.state;

    const postsList = posts.length ? (
      posts.map(post => {
        return (
          <div className="card" key={post.id}>
            <div className="card-body">
              <Link to={"/view/" + post.id} onClick={this.handleClick}>
                <h5 className="card-title">{post.title}</h5>
              </Link>
              <p className="card-text">{post.body}</p>
            </div>
          </div>
        );
      })
    ) : (
      <div className="text-danger text-center">No Posts yet...</div>
    );

    return <div>{postsList}</div>;
  }
}

export default Posts;

