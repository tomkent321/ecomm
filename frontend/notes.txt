ompiled successfully!

You can now view frontend in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://192.168.0.8:3000

Note that the development build is not optimized.
To create a production build, use yarn build.


to get the front end to see the backend local host added a proxy statement to 
the front end package.json file.  in this case:

"proxy": "http://127.0.0.1:5000",

in HomeScreen.js :

const HomeScreen = () => {
  //next statement uses the use state: [var, fuctionName] = useState(initial state)
  const [products, setProducts] = useState([])
  useEffect(() => {
    const fetchProducts = async () => {
      const { data } = await axios.get('/api/products')
      setProducts(data)
    }
    fetchProducts()
  }, [])         <==== in brackets are depenencies (will fire off the useEffect function. In this case it runs immediately because fetchProducts() is called when component loads.  useEffect is used for functional components.  Class components would use the constructor function instead)




//example of middleware:   (would show original url calling)
app.use((req,res, next)=> {
  console.log(req.originalUrl)
  next()
})

response after making a request:

/api/products/5f8bdd24b313b53997c21398


npm:    express-async-handler
Simple middleware for handling exceptions inside of async express routes and passing them to your express error handlers.


Docs on Redux:
https://redux.js.org/understanding/thinking-in-redux/glossary


dependencies in the FRONTEND to install Redux:

npm i redux react-redux redux-thunk  redux-devtools-extension

steps:  

1. create redux store
    in src folder
    file:  store.js



Adding new actions to Redux store

1. add new constants to actions/actionTypes.js
2. add a new reducer function the the appropriate reducer file
3. add the new reducer to the store.js file
4. add the action to the appropriate actions.js file
